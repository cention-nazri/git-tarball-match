#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;
use File::Basename;

use File::Temp qw/tempdir/;

my $ignore_pattern;
my $verbose;
my $debug = 0;
my $strip_components = 1;
my $commit;
my $diffline;
my $diff;
my $opt_limit = 0;
my $opt_show_match;
my $opt_show_nomatch;
my $opt_sort;
my $xdir = tempdir( CLEANUP => 1 );
my $bdir = tempdir( CLEANUP => 1);

my $tmp_dir = '/tmp';
if (-d "/dev/shm") {
	$tmp_dir = "/dev/shm";
}

$SIG{USR1} = sub {
	print STDERR "Got USR1, toggling verbose mode.\n";
	$verbose = ! $verbose;
};

GetOptions("ignore=s" => \$ignore_pattern,
	"verbose" => \$verbose,
	"strip-components=i" => \$strip_components,
	"diff-line" => \$diffline,
	"diff" => \$diff,
	"limit=i" => \$opt_limit,
	"show-no-match" => \$opt_show_nomatch,
	"show-match" => \$opt_show_match,
	"sort" => \$opt_sort,
	"debug=i" => \$debug,
	"commit=s" => \$commit,
) or die "Error in args";

if ($debug) {
	$|++;
}

sub verbose {
	my ($text, $level) = @_;
	print "$text\n" if ($verbose);
}
sub debug {
	my ($text, $debug_level) = @_;
	if (!defined $debug_level) {
		$debug_level = 0;
	}
	if ($debug > $debug_level) {
		print "$text\n";
	}
}
sub usage {
	print "Usage: $0 <tarball>\n";
}

sub pause {
	my ($text) = @_;
	print "$text\n";
	<STDIN>;
}

sub run {
	my ($cmd) = @_;
	verbose "$cmd";
	system("$cmd") == 0
		or die "$cmd: $?";
}

sub md5sum_out_to_hash {
	my ($md5sum) = @_;
	chomp $md5sum;
	my @lines = split /\n/, $md5sum;
	my %hash;
	foreach my $l (@lines) {
		if (defined $ignore_pattern && $l =~ /$ignore_pattern/) {
			verbose "Ignore: $l";
			next;
		}

		my ($md5, $file) = $l =~ /([0-9a-f]+)\s+(.*)/;
		#print "file [$file] md5 [$md5]\n";
		$hash{$file} = $md5;
	}
	return %hash;
}

sub read_cmd_output {
	my ($cmd) = @_;
	local $/ = undef;
	open my $fd, '-|', $cmd or die "$cmd: $?";
	my $out = <$fd>;
	close $fd;
	return $out;
}

sub get_git_filenames {
	my ($commit) = @_;
	my $lstree_out = read_cmd_output("git ls-tree -rz $commit");
	my @files;
	foreach my $line (split "\0", $lstree_out) {
		my @fields = split(" ", $line, 3);
		if ($fields[1] ne 'blob') {
			next;
		}
		my $filename = (split("\t", $fields[2], 2))[1];
		push @files, $filename;
	}
	return @files;
}

sub escape_single_quotes {
	my ($filename) = @_;
	$filename =~ s/'/'\\''/;
	return $filename;
}

sub get_git_md5sum {
	my ($commit_sha1) = @_;
	my %hash;
	#open my $fd, '-|', "git ls-files --with-tree=$commit_sha1" or die "git ls-files: $?";
	my @git_files = get_git_filenames($commit_sha1);
	my $err_file = "$tmp_dir/error.txt";
	foreach my $file (@git_files) {
		if ($file =~ /'/) {
			$file = escape_single_quotes($file);
		}
		my $md5_cmd = "{ git show '$commit_sha1:./$file'|md5sum|awk '{print \$1}'; } 2> $err_file";
		my $md5 = `$md5_cmd`;
		if ( -s $err_file) {
			print "-- [$md5_cmd]\n";
			verbose "cat $err_file";
			system("cat $err_file");
			print "Press any key to continue...";
			<STDIN>;
		}
		chomp $md5;
		$hash{$file} = $md5;
	}
	return %hash;
}

sub show_diff {
	my ($commit, $file) = @_;

	my $tgz_file = "$xdir/$file";
	my $git_file = "$bdir/" . basename($file) . "-$commit";
	my $cmd = "git show $commit:./$file > $git_file";
	system($cmd);
	my $git_diff = `git diff --no-index '$tgz_file' '$git_file'`;
	if ($diffline) {
		chomp($git_diff);
		my @lines = split "\n", $git_diff;
		@lines = grep !/^(---|\+\+\+) /, @lines;
		my $nadd = grep /^\+/, @lines;
		my $nrem = grep /^-/, @lines;
		print "  $file -$nrem,+$nadd\n";
	} elsif ($diff) {
		print $git_diff;
	}
}

sub md5_score {
	my ($commit, $tgz_md5, $git_md5) = @_;
	my $nmatch = 0;
	my $ncompared = 0;
	my $nnonmatch = 0;

	# in_git  in_tgz  md5sum_match?
	# 1 or 0  1 or 0      1 or 0
	#
	# individual score = (in_git + in_tgz + md5sum_match)
	#
	# total_perfect_score = (n unique files in both git and tgz) * 3

	foreach my $file (keys %$git_md5) {
		if ($tgz_md5->{$file}) {
			if ($tgz_md5->{$file} eq $git_md5->{$file}) {
				$nmatch += 1;
				if ($debug) {
					debug " same md5: $file $tgz_md5->{$file} == $git_md5->{$file}";
				} elsif ($opt_show_match) {
					print " same: $file\n";
				}
			} else {
				$nnonmatch += 1;
				if ($debug) {
					debug " ! $file";
					debug " tar md5: $tgz_md5->{$file}";
					debug " git md5: $git_md5->{$file}";
				} elsif ($opt_show_nomatch) {
					print " differ: $file\n";
				}
				if ($diffline || $diff) {
					show_diff($commit, $file);
				}
				#debug "      md5 $tgz_md5->{$file}";
				#debug "  git md5 $git_md5->{$file}";
			}
			$ncompared++;
		} else {
			debug " not in tar: $file";
		}
	}
	#my $total_files = scalar keys %$tgz_md5;

	my $score = 0;
	if ($ncompared > 0) {
		$score = $nmatch / $ncompared;
	}
	if ($nnonmatch > 0) {
		debug " $nnonmatch/$ncompared files differ";
	}
	return {
		commit => $commit,
		score => $score,
		ncompared => $ncompared,
		nnonmatch => $nnonmatch, # this is redundant!
		nmatch => $nmatch,
	};
}

use Carp qw/confess/;
sub format_score_report {
	my ($score_data) = @_;

	#if (! defined $score_data->{HAHA}) { print "HAH not defined\n"; exit 1; }
	if (! defined $score_data->{commit}) { confess "commit not defined\n"; exit 1; }
	if (! defined $score_data->{score}) { confess "score not defined\n"; exit 1; }
	if (! defined $score_data->{nnonmatch}) { confess "nnonmatch not defined\n"; exit 1; }
	if (! defined $score_data->{ncompared}) { confess "ncompared not defined\n"; exit 1; }


	return sprintf("%s %.7f (%d/%d files differ)",
		$score_data->{commit}, $score_data->{score},
		$score_data->{nnonmatch}, $score_data->{ncompared}
	);
	#return "$commit $score_data->{score} ($score_data->{nnonmatch}/$score_data->{ncompared} files differ)";
}

if (scalar @ARGV == 0) {
	usage();
	exit 1;
}

my $tarball=$ARGV[0];
my $git_log_args = "";
if (scalar @ARGV > 1) {
	shift @ARGV;
	$git_log_args = join(" ", @ARGV);
}
#print "workdir $xdir\n";

run("tar --strip-components=$strip_components -C $xdir -xf $tarball");
my $md5sum_cmd = "find $xdir -type f -print|xargs md5sum|sed -e 's,$xdir/',,";
my $md5sum = `$md5sum_cmd`;
my %tarmd5sum = md5sum_out_to_hash($md5sum);
if ($debug > 0) {
	my @files = keys %tarmd5sum;
	my $n = @files;
	debug "Tarball has $n file" . ($n>1?"s":"") . ":";
	foreach my $filename (@files) {
		debug " $filename";
	}
}

my $git_log;
my $git_log_cmd = 'git log --format=%H ' . $git_log_args;
if (defined $commit) {
	$git_log_cmd = "git log -1 --format=%H $commit";
}
open $git_log, '-|', $git_log_cmd or die "git log: $?";
my %scores;
my $highest_score = {
	score => 0,
};
my $max_nmatched = 0;
my $commit_count = 0;
while (my $h = <$git_log>) {
	$commit_count++;
	if ($opt_limit > 0 && $commit_count > $opt_limit) {
		exit 0;
	}
	chomp $h;
	my %gitmd5sum = get_git_md5sum($h);
	debug $h;
	my $s = md5_score($h, \%tarmd5sum, \%gitmd5sum);
	if ($s->{nmatch} > $max_nmatched) {
		$max_nmatched = $s->{nmatch};
	}
	if ($s->{score} == 1 && $s->{nmatch} >= $max_nmatched) {
		print "Matching commit hash: $h - nmatch $s->{nmatch}, maxnmatch $max_nmatched\n";
		exit 0;
	}
	if ($s->{score} > $highest_score->{score}) {
		$highest_score = $s;
	}
	my $out_txt = format_score_report($s);
	if (!$opt_sort) {
		print "$out_txt\n";
	} else {
		verbose $out_txt;
	}
	$scores{$h} = $s;
}

if ($opt_sort) {
	foreach my $h (sort { $scores{$a}->{score} <=> $scores{$b}->{score} } keys %scores) {
		my $s = $scores{$h};
		print format_score_report($s) . "\n";
	}
} else {
	if (defined $highest_score->{commit}) {
		print "Closest match: " . format_score_report($highest_score) . "\n";
	}
}
